{"version":3,"sources":["api/index.ts","slices/robot.ts","slices/index.ts","slices/store.ts","slices/selectors.ts","components/CounterButton.tsx","components/Header.tsx","components/Scroll.tsx","components/ErrorBoundary.tsx","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","containers/App.tsx","serviceWorker.ts","index.tsx"],"names":["axios","Axios","create","baseURL","UserApi","getUsers","get","robotSlice","createSlice","name","initialState","robots","searchField","errors","loading","reducers","loadRobots","state","loadRobotsSuccess","payload","loadRobotsFailure","changeSearchField","reducer","prepare","actions","robotReducer","rootReducer","combineReducers","robot","middleware","getDefaultMiddleware","thunk","store","configureStore","devTools","process","selectRobots","CounterButton","count","nextProps","nextState","this","id","color","props","onClick","setState","React","Component","Header","className","Scroll","children","style","overflow","border","height","ErrorBoundary","hasError","error","info","console","log","Card","email","src","alt","CardList","map","key","SearchBox","onChange","type","aria-label","placeholder","App","dispatch","useDispatch","useSelector","useEffect","a","res","data","e","target","value","filter","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ef29b366.chunk.js","sourcesContent":["import Axios from 'axios'\nimport { Robot } from '../interfaces'\n\nconst API_ROOT = 'https://jsonplaceholder.typicode.com'\n\nconst axios = Axios.create({\n  baseURL: API_ROOT,\n})\n\nexport const UserApi = {\n  getUsers: () => axios.get<Robot[]>('/users'),\n}\n\nexport const api = { UserApi }\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RobotState, Errors, Robot } from '../interfaces'\nimport { AppThunk } from './store'\nimport { UserApi } from '../api'\n\nexport const initialState: RobotState = {\n  robots: [],\n  searchField: '',\n  errors: null,\n  loading: true,\n}\n\nconst failed = (state: RobotState, { payload }: PayloadAction<Errors>) => ({\n  ...state,\n  loading: false,\n  errors: payload,\n})\n\nconst robotSlice = createSlice({\n  name: 'robot',\n  initialState,\n  reducers: {\n    loadRobots: (state) => {\n      state.loading = true\n    },\n    loadRobotsSuccess: (state, { payload }: PayloadAction<Robot[]>) => {\n      state.robots = payload\n      state.loading = false\n      state.errors = null\n    },\n    loadRobotsFailure: failed,\n    changeSearchField: {\n      reducer(state, { payload }: PayloadAction<string>) {\n        state.searchField = payload\n      },\n      prepare(searchField: string) {\n        return { payload: searchField }\n      },\n    },\n  },\n})\n\nexport const {\n  loadRobots,\n  loadRobotsSuccess,\n  loadRobotsFailure,\n  changeSearchField,\n} = robotSlice.actions\nexport const robotReducer = robotSlice.reducer\n\nexport const fetchRobots = (): AppThunk => async (dispatch) => {\n  dispatch(loadRobots())\n\n  try {\n    const res = await UserApi.getUsers()\n\n    dispatch(loadRobotsSuccess(res.data))\n  } catch (error) {\n    dispatch(loadRobotsFailure(error))\n  }\n}\n","import { combineReducers } from '@reduxjs/toolkit'\n\nimport { robotReducer } from './robot'\n\nexport const rootReducer = combineReducers({\n  robot: robotReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  ThunkAction,\n  Action,\n} from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\n\nimport { rootReducer } from './index'\nimport { RootState } from './index'\n\nconst devMode = process.env.NODE_ENV !== 'production'\n\nconst middleware = [...getDefaultMiddleware({ thunk: true })]\n\ndevMode && middleware.push(logger)\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware,\n  devTools: devMode,\n})\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>\n","import { RootState } from './index'\n\nexport const selectRobots = (state: RootState) => state.robot\n","// import React, { useState } from 'react'\n\n// export const CounterButton = () => {\n//   const [count, setCount] = useState(0)\n\n//   // return <button onClick={() => setCount(count + 1)}>Count: {count}</button>\n//   return (\n//     <Button id=\"counter\" onClick={() => setCount(count + 1)} count={count} />\n//   )\n// }\n\n// interface IButton {\n//   id: string\n//   count: number\n//   onClick: () => void\n// }\n\n// const Button: React.FC<IButton> = React.memo(\n//   ({ id, count, onClick }) => (\n//     <button id={id} onClick={onClick}>\n//       Count: {count}\n//     </button>\n//   ),\n//   (prevProps, nextProps) => {\n//     console.log(prevProps.count === nextProps.count)\n//     return prevProps.count === nextProps.count\n//   },\n// )\n\nimport React from 'react'\n\ntype CounterButtonProps = {\n  color: string\n}\n\ntype CounterButtonState = {\n  count: number\n}\n\nexport class CounterButton extends React.Component<\n  CounterButtonProps,\n  CounterButtonState\n> {\n  state = {\n    count: 0,\n  }\n\n  shouldComponentUpdate(nextProps: any, nextState: any) {\n    return this.state.count !== nextState.count\n  }\n\n  render() {\n    return (\n      <button\n        id=\"counter\"\n        color={this.props.color}\n        onClick={() => this.setState((state) => ({ count: state.count + 1 }))}\n      >\n        Count: {this.state.count}\n      </button>\n    )\n  }\n}\n","import React from 'react'\n\nimport { CounterButton } from './CounterButton'\n\nexport const Header = () => {\n  return (\n    <div>\n      <h1 className=\"f1\">Robofriends</h1>\n      <CounterButton color=\"red\" />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const Scroll: React.FC = ({ children }) => (\n  <div\n    style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}\n  >\n    {children}\n  </div>\n)\n","import React from 'react'\n\nexport class ErrorBoundary extends React.Component {\n  state = { hasError: false }\n\n  static getDerivedStateFromError(error: any) {\n    // process the error\n    return { hasError: true }\n  }\n\n  componentDidCatch(error: any, info: any) {\n    console.log(error, info)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong</h1>\n    }\n\n    return this.props.children\n  }\n}\n","import React from 'react'\n\nimport { Robot } from '../interfaces'\n\nexport const Card: React.FC<Robot> = ({ name, email, id }) => (\n  <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n    <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\" />\n\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n)\n","import React from 'react'\n\nimport { Card } from './Card'\nimport { Robot } from '../interfaces'\n\ninterface ICardList {\n  robots: Robot[]\n}\n\nexport const CardList: React.FC<ICardList> = ({ robots }) => (\n  <div>\n    {robots.map((robot) => {\n      return <Card key={robot.id} {...robot} />\n    })}\n  </div>\n)\n","import React, { ChangeEvent } from 'react'\n\ninterface ISearchBox {\n  // searchField: string\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const SearchBox: React.FC<ISearchBox> = ({ onChange }) => (\n  <div className=\"pa2\">\n    <input\n      className=\"pa3 b--green bg-lightest-blue\"\n      type=\"search\"\n      aria-label=\"Search\"\n      placeholder=\"Search robots\"\n      onChange={onChange}\n    />\n  </div>\n)\n","import React, { useEffect, ChangeEvent } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectRobots } from '../slices/selectors'\nimport { fetchRobots, changeSearchField } from '../slices/robot'\n\nimport { Header } from '../components/Header'\nimport { Scroll } from '../components/Scroll'\nimport { ErrorBoundary } from '../components/ErrorBoundary'\nimport { CardList } from '../components/CardList'\nimport { SearchBox } from '../components/SearchBox'\n\nexport const App = () => {\n  const dispatch = useDispatch()\n  const { robots, loading, searchField } = useSelector(selectRobots)\n\n  useEffect(() => {\n    dispatch(fetchRobots())\n  }, [dispatch])\n\n  const handleSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\n    // setSearchField(e.target.value)\n    dispatch(changeSearchField(e.target.value))\n  }\n\n  const filterRobots = () => {\n    return robots.filter((robot) =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase()),\n    )\n  }\n\n  return (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox onChange={handleSearchChange} />\n      <Scroll>\n        {loading ? (\n          <h1>Loading...</h1>\n        ) : (\n          <ErrorBoundary>\n            <CardList robots={filterRobots()} />\n          </ErrorBoundary>\n        )}\n      </Scroll>\n    </div>\n  )\n}\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  if ('serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker.',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // console.log('Success', registration.scope)\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'tachyons'\n\nimport { Provider } from 'react-redux'\nimport { store } from './slices/store'\n\nimport { App } from './containers/App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}